const generateJsFile = (file) => {
    let processFile = path.relative(process.cwd(), file);
    console.log(`➤ ${processFile.yellow}`.blue);
    // resetIndex();
    // resetMessageHash();
    let hasReplaced = false;
    let content = fs.readFileSync(file, 'utf8');
    //判断是否已经引入了 Vue， 若没有引入，则在文件头部引入
    let vueMatch = content.match(/(import[\s\t]+([^\s\t]+)[\s\t]+from[\s\t]+'vue'[\s\t]*;?)|((let|var|const)[\s\t]+([^\s\t]+)[\s\t]+\=[\s\t]+require\('vue'\)[\s\t]*;?)/m);
    let vueModule = 'Vue';
    if (!vueMatch) {
        content = `import Vue from 'vue';\n${content}`;
    } else {
        vueModule = vueMatch[2] || vueMatch[5];
    }
    let imports = content.match(/from[\s\t]+['"][^'"]+['"][\s\t]*;?/gm);
    let lastImport = imports[imports.length - 1];
    //判断是否已经做过绑定 $t 的绑定，若没有，则自动绑定 $t
    if (!content.match( /import i18n from /)) {
        content = content.replace(lastImport, $ => {
            return `${$}\nimport i18n from '../../i18n/index'\n`;
        });
    }
    //替换注释部分
    let comments = {};
    let commentsIndex = 0;
    content = content.replace(/(\/\*(.|\n|\r)*\*\/)|(\/\/.*)/gim, (match, p1, p2, p3, offset, str) => {
        //排除掉url协议部分
        if (offset > 0 && str[offset - 1] === ':') return match;
        let commentsKey = `/*comment_${commentsIndex++}*/`;
        comments[commentsKey] = match;
        return commentsKey;
    });
    content = content.replace(/(['"`])([^'"`\n]*[\u4e00-\u9fa5]+[^'"`\n]*)(['"`])/gim, (_, prev, match, after) => {
        match = match.trim();
        let currentKey;
        let result = '';
        if (prev !== '`') {
            //对于普通字符串的替换
            currentKey = getCurrentKey(match, file);
            result = `i18n.t('${currentKey}')`;
        } else {
            //对于 `` 拼接字符串的替换
            let matchIndex = 0;
            let matchArr = [];
            match = match.replace(/(\${)([^{}]+)(})/gim, (_, prev, match) => {
                matchArr.push(match);
                return `{${matchIndex++}}`;
            });
            currentKey = getCurrentKey(match, file);
            if (!matchArr.length) {
                result = `i18n.t('${currentKey}')`;
            } else {
                result = `i18n.t('${currentKey}', [${matchArr.toString()}])`;
            }
        }
        messages[currentKey] = match;
        messagesHash[match] = currentKey;
        hasReplaced = true;
        return result;
    });
    //换回注释部分
    content = content.replace(/\/\*comment_\d+\*\//gim, match => {
        return comments[match];
    });
    hasReplaced && fs.writeFileSync(file, content, 'utf-8');
    console.log(`✔ ${processFile.yellow}`.green);
};

/**
 * 入口
 * @param src
 * @param options
 */
module.exports.generate = (src, options) => {
    config = Object.assign(config, options);
    rootPath = path.join(process.cwd(), src);
    let i18nPath = path.join(process.cwd(), options.path ? options.path : '');
    i18nFile = path.join(i18nPath, `${options.filename}.js`);
    let files = getAllFiles(rootPath);
    getIgnoreFile()
    initMessage();
    files.forEach(item => {
        if (item !== i18nFile && !ignoreFilePathList.includes(item) && (!config.path || config.path && item.indexOf(i18nPath) < 0)) {
            path.extname(item).toLowerCase() === '.vue' ? generateVueFile(item) : generateJsFile(item);
        }
    });
    writeMessage();
    console.log(`转换完成..........`.green)
};
